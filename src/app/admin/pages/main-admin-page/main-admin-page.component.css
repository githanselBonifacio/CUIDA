@import url('../../../../styles.css');

.container-admin {
    text-align: center;
    padding-top: 5rem;
    width: 100%;
    height: 100vh;
    background-image: url("../../../../assets/img/cuida-background.png");
    background-size: cover;
    background-position: center;

}

.container-menu {
    width: 80%;
    margin: 0 auto;
    padding: 4rem 2rem 6rem 2rem;
}


.text-menu h5 {
    color: var(--gris4-color);
    font-size: 1.6rem;
    font-weight: bold;

}

.text-menu h5:hover {
    color: var(--third-color);
    font-size: 1.7rem;
    cursor: default;
}

.hex-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, 7rem);
    grid-auto-rows: 11rem;
    justify-content: center;
    gap: 0.8rem;
}

.hexagon {
    display: flex;
    width: 14rem;
    height: 14rem;
    margin: auto auto;
    background-color: var(--second-color);
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    text-align: center;
    justify-content: center;
    align-items: center;
    grid-column: span 2;

}

.hexagon:first-of-type {
    grid-column: 2/span 2;
}

@media screen and (min-width:600px) and (max-width:740px) {
    .hexagon:nth-child(odd) {
        grid-column: 2/span 1;
    }
}

@media screen and (min-width:740px) and (max-width:910px) {
    .hexagon:nth-child(odd) {
        grid-column: 2/span 2;
    }
}

@media screen and (min-width:910px) and (max-width:1470px) {
    .hexagon:nth-child(4n+1) {
        grid-column: 2/span 2;
    }
}

@media screen and (min-width:1470px) and (max-width:1260px) {
    .hexagon:nth-child(5n+1) {
        grid-column: 2/span 2;
    }
}

@media screen and (min-width:1260px) and (max-width:1600px) {
    .hexagon.hexagon:first-of-type {
        grid-column: span 2;
    }

    .hexagon:nth-child(4n+1) {
        grid-column: span 2;
    }

    .hexagon:nth-child(3n+1) {
        grid-column: 2/ span 2;
    }

}

@media screen and (min-width:1600px) and (max-width:2000px) {

    .hex-row {
        grid-template-columns: repeat(auto-fit, 8rem);
        grid-auto-rows: 12rem;
    }

    .hexagon {
        width: 16rem;
        height: 16rem;
    }

    .hexagon.hexagon:first-of-type {
        grid-column: 2/span 2;
    }

    .hexagon:nth-child(3n+1) {
        grid-column: 3/span 2;
    }
}